package com.cathrino.org.eodnorog.kotlincourse.lesson5

//Операторы

//Арифметические операции
//  + (сложение): возвращает сумму двух чисел.
//  - (вычитание): возвращает разность двух чисел.
//  * (умножение): возвращает произведение двух чисел.
//  / (деление): возвращает частное двух чисел.
//  %: возвращает остаток от целочисленного деления двух чисел.
//  ++ (инкремент): увеличивает значение на единицу.
//  -- (декремент): уменьшает значение на единицу.

fun main() {
    val sum = "5" + "3" //сложение
    val diff = 10 - 5 //вычитание
    val product = 10 * 5 //умножение
    val quotient = 10 / 5 //деление
    val remainder = 10 % 5 //вычесление остатка от деления

    val isEqual = (5 == 17) //оператор сравнения, например булевых
    val isNotEqual = (5 !== 17) //оператор сравнения, != не равно
    val isGreater = (5 > 3)
    val isLesser = (5 < 3)
    val isGreaterOrEqual = (5 >= 5)
    val isLesserOrEqual = (5 <= 3)

    val andResult = true && true //логические операторы (и или не), оба true -> true, в остальных случаях false
    val orResult = true || false //оба false -> false, в остальных случаях true
    val notResult = !(5 > 3) //переворачивает значение

    var number = 5//оператор присваивания (=) то есть number присваивается значение 5
    number += 3 //присваивание с увеличением
    number -= 2 //присваивание с уменьшением

    number++//операторы инкримента и дикримента, имеющиеся изменяемую переменную, с числовым типом, увеличить или уменьшить на единицу
    number--
    number++
    // println(++number) сначала сложение, потом предоставление результата
    // println(number++) сначала предоставление результата, а после сложение

    val example = ((8 + 1) >= 9) || (6 - 2 != 4) && (2 * 3 == 6) //приоритет () далее ! далее && далее ||


    println(number)
}

//Также есть ряд операций присвоения, которые сочетают арифметические операции и присвоение:
//
//  +=: присваивание после сложения.
//Присваивает левому операнду сумму левого и правого операндов: A += B эквивалентно A = A + B
//
//  -=: присваивание после вычитания.
//Присваивает левому операнду разность левого и правого операндов: A -= B эквивалентно A = A - B
//
//  *=: присваивание после умножения.
//Присваивает левому операнду произведение левого и правого операндов: A *= B эквивалентно A = A * B
//
//  /=: присваивание после деления.
//Присваивает левому операнду частное левого и правого операндов: A /= B эквивалентно A = A / B
//
//  %=: присваивание после деления по модулю.
//Присваивает левому операнду остаток от целочисленного деления левого операнда на правый: A %= B эквивалентно A = A % B

//Поразрядные операции
//
//Ряд операций выполняется над двоичными разрядами числа.
//Здесь важно понимать, как выглядит двоичное представление тех или иных чисел.
//В частности, число 4 в двоичном виде - 100, а число 15 - 1111.
//
//shl: сдвиг битов числа со знаком влево
//shr: сдвиг битов числа со знаком вправо
//ushr: сдвиг битов беззнакового числа вправо

//and: побитовая операция AND (логическое умножение или конъюнкция).
//Эта операция сравнивает соответствующие разряды двух чисел и возвращает единицу, если эти разряды обоих чисел равны 1.
//Иначе возвращает 0.

//or: побитовая операция OR (логическое сложение или дизъюнкция).
//Эта операция сравнивают два соответствуюших разряда обоих чисел и возвращает 1, если хотя бы один разряд равен 1.
//Если оба разряда равны 0, то возвращается 0.

//xor: побитовая операция XOR.
//Сравнивает два разряда и возвращает 1, если один из разрядов равен 1, а другой равен 0.
//Если оба разряда равны, то возвращается 0.

//inv: логическое отрицание или инверсия - инвертирует биты числа


//Условные выражения
//Условные выражения представляют некоторое условие, которое возвращает значение типа Boolean: либо true (если условие истинно),
//либо false (если условие ложно).
//
//Операции отношения:
//  > (больше чем): возвращает true, если первый операнд больше второго. Иначе возвращает false
//  < (меньше чем): возвращает true, если первый операнд меньше второго. Иначе возвращает false
//  >= (больше чем или равно): возвращает true, если первый операнд больше или равен второму
//  <= (меньше чем или равно): возвращает true, если первый операнд меньше или равен второму.
//  == (равно): возвращает true, если оба операнда равны. Иначе возвращает false
//  != (не равно): возвращает true, если оба операнда НЕ равны


//Логические операции
//Операндами в логических операциях являются два значения типа Boolean.
//Нередко логические операции объединяют несколько операций отношения:
//
//  and: возвращает true, если оба операнда равны true.
//  or: возвращает true, если хотя бы один из операндов равен true.
//  xor: возвращает true, если только один из операндов равен true. Если операнды равны, возвращается false
//  !: возвращает true, если операнд равен false. И, наоборот, если операнд равен true, возвращается false.
//  В качестве альтернативы оператору ! можно использовать метод not():
//  in: возвращает true, если операнд имеется в некоторой последовательности.
