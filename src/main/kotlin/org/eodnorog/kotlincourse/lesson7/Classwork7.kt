package org.eodnorog.kotlincourse.lesson7

//Циклы
//Циклы представляют вид управляющих конструкций, которые позволяют в зависимости от определенных условий выполнять некоторое действие множество раз


//for
//Цикл for пробегается по всем элементам коллекции.
// В этом плане цикл for в Kotlin эквивалентен циклу for-each в ряде других языков программирования.
//Его формальная форма выглядит следующим образом:
/*
for(переменная in последовательность){
    выполняемые инструкции
}
*/


//Цикл while
//Цикл while повторяет определенные действия пока истинно некоторое условие:
/*
var i = 10
while(i > 0){
    println(i*i)
    i--;
}
*/


//do..while
//Есть и другая форма цикла while - do..while:
/*
var i = -1
do{
    println(i*i)
    i--;
}
while(i > 0)
 */
//В данном случае вначале выполняется блок кода после ключевого слова do, а потом оценивается условие после while.
//Если условие истинно, то повторяется выполнение блока после do.
//То есть несмотря на то, что в данном случае переменная i меньше 0 и она не соответствует условию, тем не менее блок do выполнится хотя бы один раз.


//Операторы continue и break
//Иногда при использовании цикла возникает необходимость при некоторых условиях не дожидаться выполнения всех инструкций в цикле, перейти к новой итерации.
//Для этого можно использовать оператор continue:
/*
for(n in 1..8){
    if(n == 5) continue;
    println(n * n)
}
 */
//В данном случае когда n будет равно 5, сработает оператор continue.
//И последующая инструкция, которая выводит на консоль квадрат числа, не будет выполняться.
//Цикл перейдет к обработке следующего элемента в массиве
//
//Бывает, что при некоторых условиях нам вовсе надо выйти из цикла, прекратить его выполнение. В этом случае применяется оператор break:
/*
for(n in 1..5){
    if(n == 5) break;
    println(n * n)
}
 */
//В данном случае когда n окажется равен 5, то с помощью оператора break будет выполнен выход из цикла. Цикл полностью завершится.


